"""
Script de teste para verificar a integra√ß√£o LLM.
"""

import json
import pandas as pd
from pathlib import Path

def test_llm_integration():
    """Testa a integra√ß√£o LLM."""
    print("üß™ Testando integra√ß√£o LLM...")
    
    # 1. Verificar se o m√≥dulo LLM existe
    try:
        from llm_analyzer import HybridLLMAnalyzer
        print("‚úÖ M√≥dulo LLM carregado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao carregar m√≥dulo LLM: {e}")
        return False
    
    # 2. Verificar se os dados processados existem
    data_file = Path("data/merged_data_clean.csv")
    if not data_file.exists():
        print("‚ùå Arquivo de dados processados n√£o encontrado")
        print("   Execute primeiro: python optimized_processor.py")
        return False
    
    print("‚úÖ Dados processados encontrados")
    
    # 3. Verificar se h√° an√°lise VADER
    try:
        df = pd.read_csv(data_file)
        if 'sentiment' not in df.columns:
            print("‚ùå Coluna 'sentiment' (VADER) n√£o encontrada")
            print("   Execute primeiro: python optimized_processor.py")
            return False
        
        vader_count = df['sentiment'].notna().sum()
        print(f"‚úÖ An√°lise VADER encontrada: {vader_count:,} textos")
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar dados: {e}")
        return False
    
    # 4. Verificar se h√° resultados LLM
    llm_cache = Path("data/cache/llm_analysis_results.json")
    if llm_cache.exists():
        try:
            with open(llm_cache, 'r', encoding='utf-8') as f:
                llm_results = json.load(f)
            
            if 'error' not in llm_results:
                print("‚úÖ Resultados LLM encontrados")
                print(f"   - Local: {llm_results['local_analysis']['total_processed']:,} textos")
                print(f"   - GPT: {llm_results['gpt_analysis']['total_processed']:,} textos")
                print(f"   - Concord√¢ncia: {llm_results['comparison']['agreement_rate']:.1%}")
                return True
            else:
                print(f"‚ö†Ô∏è  Erro nos resultados LLM: {llm_results['error']}")
        except Exception as e:
            print(f"‚ùå Erro ao carregar resultados LLM: {e}")
    else:
        print("‚ö†Ô∏è  Resultados LLM n√£o encontrados")
        print("   Execute: python llm_analyzer.py")
    
    return False

def test_workflow_integration():
    """Testa a integra√ß√£o no workflow."""
    print("\nüîß Testando integra√ß√£o no workflow...")
    
    try:
        from workflow_analysis import OptimizedAnalysisWorkflow
        
        workflow = OptimizedAnalysisWorkflow()
        
        # Testar an√°lise LLM
        results = workflow.analyze_llm_hybrid(50)  # Amostra pequena para teste
        
        if 'error' not in results:
            print("‚úÖ Integra√ß√£o no workflow funcionando")
            return True
        else:
            print(f"‚ö†Ô∏è  Erro na integra√ß√£o: {results['error']}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no teste do workflow: {e}")
        return False

def main():
    """Fun√ß√£o principal."""
    print("=================================================================================")
    print("üß™ TESTE DE INTEGRA√á√ÉO LLM")
    print("=================================================================================")
    
    # Teste b√°sico
    llm_ok = test_llm_integration()
    
    # Teste workflow
    workflow_ok = test_workflow_integration()
    
    print("\n=================================================================================")
    print("üìä RESUMO DOS TESTES")
    print("=================================================================================")
    
    if llm_ok and workflow_ok:
        print("‚úÖ TODOS OS TESTES PASSARAM!")
        print("üéâ Integra√ß√£o LLM funcionando perfeitamente")
    elif llm_ok:
        print("‚ö†Ô∏è  M√≥dulo LLM OK, mas workflow com problemas")
    elif workflow_ok:
        print("‚ö†Ô∏è  Workflow OK, mas m√≥dulo LLM com problemas")
    else:
        print("‚ùå PROBLEMAS ENCONTRADOS")
        print("üîß Verifique:")
        print("   1. Depend√™ncias instaladas: pip install -r requirements.txt")
        print("   2. Dados processados: python optimized_processor.py")
        print("   3. An√°lise LLM: python llm_analyzer.py")
        print("   4. Chave OpenAI no .env (opcional)")

if __name__ == "__main__":
    main() 